p_state[i] = (node_states[chosen_tip_dat$Daughter1,] %*% left_node[i,]) *
(node_states[chosen_tip_dat$Daughter2,] %*% right_node[i,])
}
node_states[tips,] = p_state #add this to main matrix
}
#return likelihood for whole tree
overall_likelihood = sum(node_states[root_node,] * 1/4)
return(overall_likelihood)
}
seq = c("A","A","A","T","T","T","C","C","G","G")
likelihoods = sapply(mutation_rates, function(mu)
find_likelihood(seq,final_tree_df,jc_matrix, mu))
# Define the Jukes-Cantor model with row and column names
jc_matrix = matrix(c(-3/4, 1/4, 1/4, 1/4,
1/4, -3/4, 1/4, 1/4,
1/4, 1/4, -3/4, 1/4,
1/4, 1/4, 1/4, -3/4),
nrow = 4, ncol = 4)
mutation_rates = seq(0.01, 1, by = 0.01)
seq = c("A","A","A","T","T","T","C","C","G","G")
likelihoods = sapply(mutation_rates, function(mu)
find_likelihood(seq,final_tree_df,jc_matrix, mu))
# Find maximum likelihood value of mu
max_likelihood_index = which.max(likelihoods)
max_likelihood_mu = mutation_rates[max_likelihood_index]
max_likelihood = likelihoods[max_likelihood_index]
log(max_likelihood)
#randomly assign new leaf values
N = 1000
random_leaf_vals = vector(mode='list', length=N)
max_like_mu = vector(mode='list', length=N)
for (n in 1:N) {
new_leaf_vals = sample(c("A","C","G","T"), 10, replace = TRUE)
likelihoods = sapply(mutation_rates, function(mu)
find_likelihood(new_leaf_vals,final_tree_df,jc_matrix, mu))
# Find maximum likelihood value of mu
max_likelihood_index = which.max(likelihoods)
max_likelihood_mu = mutation_rates[max_likelihood_index]
max_likelihood = likelihoods[max_likelihood_index]
max_like_mu[[n]] = max_likelihood_mu
}
hist(unlist(max_like_mu))
mu_plot = density(unlist(max_like_mu))
plot(mu_plot, main = "Distribution of mu MLEs for 1000 random assignments")
observed_sequence = c("A", "C", "A", "G", "G", "A", "T", "C", "A", "T")
# Define the Jukes-Cantor model with row and column names
jc_matrix = matrix(c(-3/4, 1/4, 1/4, 1/4,
1/4, -3/4, 1/4, 1/4,
1/4, 1/4, -3/4, 1/4,
1/4, 1/4, 1/4, -3/4),
nrow = 4, ncol = 4)
mutation_rates = seq(0.01, 1, by = 0.01)
likelihoods = sapply(mutation_rates, function(mu)
find_likelihood(observed_sequence, final_tree_df, jc_matrix, mu))
max_likelihood_index = which.max(likelihoods)
max_likelihood_mu = mutation_rates[max_likelihood_index]
max_likelihood = likelihoods[max_likelihood_index]
log(max_likelihood)
plot(mutation_rates, log(likelihoods), type = "l", xlab = "Mutation rate (mu)",
ylab = "Log Likelihood", main = "Log Likelihood vs Mutation Rate")
# Add maximum likelihood point to the plot
points(max_likelihood_mu, log(max_likelihood), col = "red")
text(max_likelihood_mu, log(max_likelihood), labels = paste(round(max_likelihood_mu, 2)),
pos = 4, col = "red")
hist(unlist(max_like_mu))
hist(unlist(max_like_mu), main = "Distribution of mu MLEs for 1000 random assignments",
xlab = "mu MLEs", col = "coral")
lines(mu_plot, lwd = 2)
plot(mu_plot, main = "Distribution of mu MLEs for 1000 random assignments")
hist(unlist(max_like_mu), main = "Distribution of mu MLEs for 1000 random assignments",
xlab = "mu MLEs", col = "coral", probability = T)
lines(mu_plot, lwd = 2)
mu_plot = density(unlist(max_like_mu), adjust = 2)
hist(unlist(max_like_mu), main = "Distribution of mu MLEs for 1000 random assignments",
xlab = "mu MLEs", col = "coral", probability = T)
lines(mu_plot, lwd = 2)
mu_plot = density(unlist(max_like_mu))
hist(unlist(max_like_mu), main = "Distribution of mu MLEs for 1000 random assignments",
xlab = "mu MLEs", col = "coral", probability = T)
lines(mu_plot, lwd = 2)
mu_plot = density(unlist(max_like_mu))
hist(unlist(max_like_mu), main = "Distribution of mu MLEs for 1000 random assignments",
xlab = "mu MLEs", col = "coral", probability = T)
lines(mu_plot, lwd = 2)
abline(v = mean(unlist(max_like_mu)))
seq = c("T","G","C","A","T","G","C","A","T","G")
likelihoods = sapply(mutation_rates, function(mu)
find_likelihood(seq, final_tree_df, jc_matrix, mu))
# Find maximum likelihood value of mu
max_likelihood_index = which.max(likelihoods)
max_likelihood_mu = mutation_rates[max_likelihood_index]
max_likelihood = likelihoods[max_likelihood_index]
log(max_likelihood)
seq = c("T","T","T","T","T","T","T","T","T","T")
likelihoods = sapply(mutation_rates, function(mu)
find_likelihood(seq, final_tree_df, jc_matrix, mu))
# Find maximum likelihood value of mu
max_likelihood_index = which.max(likelihoods)
max_likelihood_mu = mutation_rates[max_likelihood_index]
max_likelihood = likelihoods[max_likelihood_index]
log(max_likelihood)
#randomly assign new leaf values
N = 1000
random_leaf_vals = vector(mode='list', length=N)
max_like_mu = vector(mode='list', length=N)
for (n in 1:N) {
new_leaf_vals = sample(c("A","C","G","T"), 10, replace = TRUE)
likelihoods = sapply(mutation_rates, function(mu)
find_likelihood(new_leaf_vals,final_tree_df,jc_matrix, mu))
# Find maximum likelihood value of mu
max_likelihood_index = which.max(likelihoods)
max_likelihood_mu = mutation_rates[max_likelihood_index]
max_likelihood = likelihoods[max_likelihood_index]
max_like_mu[[n]] = max_likelihood_mu
}
knitr::opts_chunk$set(echo = FALSE, include = TRUE, cache = TRUE,
warning = FALSE, message = FALSE, eval = FALSE)
mu_plot = density(unlist(max_like_mu))
hist(unlist(max_like_mu), main = "Distribution of mu MLEs for 1000 random assignments",
xlab = "mu MLEs", col = "coral", probability = T)
lines(mu_plot, lwd = 2)
abline(v = mean(unlist(max_like_mu)))
```{r Repeating Tajma D}
m <- function(x, k) {
j <- 1
for (i in 1:k) {
if (x[i] > x[j])
j <- i
}
j
}
f <- function(x, k) {
i <- 1
while (i < k) {
t <- x[i]
x[i] <- x[k]
x[k] <- t
i <- i + 1
k <- k - 1
}
x
}
p <- function(x) {
n <- length(x)
for (i in n:1) {
m <- m(x, i)
print(m)
x <- f(x, m)
x <- f(x, i)
print(x)
}
x
}
p( c(4, 5, 2, 8)) # case 1
p( c(15, 8, 9, 30, 7, 1, 69, 4, 10)) # case 2
a <- 3; b <- 5
M <- matrix(1, a, b)
q <- function(M, i, j) {
f <- function(u,v) {
if (u<1 || u>a) return(0)
if (v<1 || v>b) return(0)
return(M[u,v])
}
for (i in 1:a) {
for (j in b:1) {
s <- f(i-1, j) + f(i, j+1)
M[i,j] <- M[i,j] * max(s, 1)
}
}
return(M)
}
a <- 3; b <- 5
M <- matrix(1, a, b)
q(M, a, b)
a <- 4; b <- 5
M <- matrix(1, a, b)
M[2,2] <- M[2,4] <- 0
q(M, a, b)
s = function(n) {
a = b = 0
while(n > 0) {
n = n - 1
if (a == 1) {
a = 0; b = b + 1
} else {
a = 1
}
}
c(b,a)
}
g = function(a,b) {
if (b == 1) {
a
} else {
r = s(b)
ifelse(r[2], a, 0) + g(a+a, r[1])
}
}
g(9,8)
g(8,9)
g(6,10)
g(7,9)
s(6)
s(7)
`/diff()`
?diff
?stopifnot
f = function(n,y) {
stopifnot(all(diff(y) > 0))
a = rep(0,n)
for (c in y) {
for (j in 1:n) {
if (c <= j) {
l = j - c
w = ifelse(l==0, 1, a[l])
a[j] = a[j] + w
}
}
print(a)
}
a[n]
}
f(7, c(1,2,4))
f(12,c(1,2,4))
f(12,c(1,5,10))
s = function(L,k) {
## L is a vector of numbers. k is a positive integer.
print(c(k, L)) ## show what is printed each time here
if (length(L) < 2) {
return (L[k])
}
p = 1; x = L[p]
p1 = p2 = p3 = c()
for (y in L) {
if (y < x) p1 = c(p1, y)
if (y == x) p2 = c(p2, y)
if (y > x) p3 = c(p3, y)
}
if ( k <= length(p1) ) {
return ( s(p1, k) )
} else {
z = length(p1) + length(p2)
if ( k > z ) {
return ( s(p3, k - z) )
} else {
return ( x )
}
}
}
## Evaluate the following expressions:
L = c(6, 4, 19, 2, 17, 18, 2)
a = s(L, 1)
b = s(L, 4)
c = s(L, 7)
d = s(L, 8)
#Change environment to import data
setwd("/Users/carolinaierardi/Documents/Personal/CurriÃÅculo/PitceathlyLabRA")
mito_var = readlines("task_examples.vcf")
mito_var = readLines("task_examples.vcf")
mito_var = readLines("task_example.vcf")
mito_var = read.table("task_example.vcf")
View(mito_var)
mito_var = read.table("task_example.vcf", stringsAsFactors = False)
mito_var = read.table("task_example.vcf", stringsAsFactors = F)
mitomap = read.csv("ConfirmedMutations  MITOMAP  Foswiki.csv")
View(mitomap)
#Import data
mito_var1 = readLines("task_example.vcf")
mito_var1
mito_var1<-mito_var1[-(grep("#CHROM",mito_var1)+1):-(length(mito_var1))]
mito_var1
vcf_names<-unlist(strsplit(mito_var1[length(mito_var1)],"\t"))
names(mito_var) = vcf_names
View(mito_var)
mito_var["INFO"][1]
mito_var[1,"INFO"]
unique(mito_var["SAMPLE"])
length(unique(mito_var["SAMPLE"]))
mito_var <- mito_var %>%
mutate(AF = as.numeric(str_extract(INFO, "(?<=AF=)[0-9.]+")))
library(dplyr)
library(stringr)
mito_var <- mito_var %>%
mutate(AF = as.numeric(str_extract(INFO, "(?<=AF=)[0-9.]+")))
View(mito_var)
mito_var[142,"INFO"]
summary(vcf_data$AF)
summary(mito_var$AF)
hist(vcf_data$AF, main = "Distribution of AF (Heteroplasmy Levels)", xlab = "AF")
hist(mito_var$AF, main = "Distribution of AF (Heteroplasmy Levels)", xlab = "AF")
unique_samples = length(unique(vcf_data$SampleID)) # Assuming SampleID is the column name
unique_samples = length(unique(mito_var$SampleID)) # Assuming SampleID is the column name
unique_samples = length(unique(mito_var$SAMPLE)) # Assuming SampleID is the column name
mitomap <- mitomap %>%
mutate(
REF = str_extract(Allele, "(?<=m\\.)[ACGT]+(?=[^>])"),
ALT = str_extract(Allele, "(?<=>)[ACGT]+")
)
View(mitomap)
mitomap <- mitomap %>%
mutate(
Mutation_Type = case_when(
str_detect(Allele, "del") ~ "deletion",
str_detect(Allele, "ins") ~ "insertion",
str_detect(Allele, ">") ~ "substitution",
TRUE ~ "other"
),
# For substitutions: extract REF and ALT around the '>'
REF = ifelse(Mutation_Type == "substitution", str_extract(Allele, "(?<=m\\.\\d+)[ACGT]+(?=>)"), NA),
ALT = ifelse(Mutation_Type == "substitution", str_extract(Allele, "(?<=>)[ACGT]+"), NA),
# For deletions: extract the deleted sequence as REF, ALT is empty
REF = ifelse(Mutation_Type == "deletion", str_extract(Allele, "(?<=del)[ACGT]+"), REF),
ALT = ifelse(Mutation_Type == "deletion", "*", ALT),
# For insertions: REF is empty, ALT is the inserted sequence
ALT = ifelse(Mutation_Type == "insertion", str_extract(Allele, "(?<=ins)[ACGT]+"), ALT),
REF = ifelse(Mutation_Type == "insertion", "", REF)
)
mitomap = read.csv("ConfirmedMutations  MITOMAP  Foswiki.csv")
mitomap <- mitomap %>%
mutate(
Mutation_Type = case_when(
str_detect(Allele, "del") ~ "deletion",
str_detect(Allele, "ins") ~ "insertion",
str_detect(Allele, ">") ~ "substitution",
TRUE ~ "other"
),
# For substitutions: extract REF and ALT around the '>'
REF = ifelse(Mutation_Type == "substitution", str_extract(Allele, "(?<=m\\.\\d+)[ACGT]+(?=>)"), NA),
ALT = ifelse(Mutation_Type == "substitution", str_extract(Allele, "(?<=>)[ACGT]+"), NA),
# For deletions: extract the deleted sequence as REF, ALT is empty
REF = ifelse(Mutation_Type == "deletion", str_extract(Allele, "(?<=del)[ACGT]+"), REF),
ALT = ifelse(Mutation_Type == "deletion", "*", ALT),
# For insertions: REF is empty, ALT is the inserted sequence
ALT = ifelse(Mutation_Type == "insertion", str_extract(Allele, "(?<=ins)[ACGT]+"), ALT),
REF = ifelse(Mutation_Type == "insertion", "", REF)
)
mitomap_data <- mitomap_data %>%
mutate(
Mutation_Type = case_when(
str_detect(Allele, "del") ~ "deletion",
str_detect(Allele, "ins") ~ "insertion",
str_detect(Allele, ">") ~ "substitution",
TRUE ~ "other"
),
# Extract REF and ALT based on mutation type
REF = case_when(
Mutation_Type == "substitution" ~ str_extract(Allele, "[ACGT]+(?=>)"),   # Capture sequence before >
Mutation_Type == "deletion" ~ str_extract(Allele, "(?<=del)[ACGT]+"),    # Capture sequence after 'del'
Mutation_Type == "insertion" ~ "",                                       # For insertions, REF is empty
TRUE ~ NA_character_
),
ALT = case_when(
Mutation_Type == "substitution" ~ str_extract(Allele, "(?<=>)[ACGT]+"),  # Capture sequence after >
Mutation_Type == "insertion" ~ str_extract(Allele, "(?<=ins)[ACGT]+"),   # Capture sequence after 'ins'
Mutation_Type == "deletion" ~ "",                                        # For deletions, ALT is empty
TRUE ~ NA_character_
)
)
mitomap <- mitomap %>%
mutate(
Mutation_Type = case_when(
str_detect(Allele, "del") ~ "deletion",
str_detect(Allele, "ins") ~ "insertion",
str_detect(Allele, ">") ~ "substitution",
TRUE ~ "other"
),
# Extract REF and ALT based on mutation type
REF = case_when(
Mutation_Type == "substitution" ~ str_extract(Allele, "[ACGT]+(?=>)"),   # Capture sequence before >
Mutation_Type == "deletion" ~ str_extract(Allele, "(?<=del)[ACGT]+"),    # Capture sequence after 'del'
Mutation_Type == "insertion" ~ "",                                       # For insertions, REF is empty
TRUE ~ NA_character_
),
ALT = case_when(
Mutation_Type == "substitution" ~ str_extract(Allele, "(?<=>)[ACGT]+"),  # Capture sequence after >
Mutation_Type == "insertion" ~ str_extract(Allele, "(?<=ins)[ACGT]+"),   # Capture sequence after 'ins'
Mutation_Type == "deletion" ~ "",                                        # For deletions, ALT is empty
TRUE ~ NA_character_
)
)
View(mitomap)
mitomap <- mitomap %>%
mutate(
Mutation_Type = case_when(
str_detect(Allele, "del") ~ "deletion",
str_detect(Allele, "ins") ~ "insertion",
str_detect(Allele, ">") ~ "substitution",
str_detect(Allele, "inv") ~ "inversion",
TRUE ~ "other"
),
# Extract REF and ALT based on mutation type
REF = case_when(
Mutation_Type == "substitution" ~ str_extract(Allele, "[ACGT]+(?=>)"),    # Capture sequence before >
Mutation_Type == "deletion" ~ str_extract(Allele, "(?<=del)[ACGT]+"),     # Capture sequence after 'del'
Mutation_Type == "insertion" ~ "",                                        # For insertions, REF is empty
Mutation_Type == "inversion" ~ str_extract(Allele, "(?<=inv)[ACGT]+"),    # Capture sequence after 'inv'
TRUE ~ NA_character_
),
ALT = case_when(
Mutation_Type == "substitution" ~ str_extract(Allele, "(?<=>)[ACGT]+"),   # Capture sequence after >
Mutation_Type == "insertion" ~ str_extract(Allele, "(?<=ins)[ACGT]+"),    # Capture sequence after 'ins'
Mutation_Type == "deletion" ~ "",                                         # For deletions, ALT is empty
Mutation_Type == "inversion" ~ stri_reverse(REF),                         # Reverse the REF sequence for ALT in inversions
TRUE ~ NA_character_
)
)
mitomap <- mitomap %>%
mutate(
Mutation_Type = case_when(
str_detect(Allele, "del") ~ "deletion",
str_detect(Allele, "ins") ~ "insertion",
str_detect(Allele, ">") ~ "substitution",
str_detect(Allele, "inv") ~ "inversion",
TRUE ~ "other"
),
# Extract REF and ALT based on mutation type
REF = case_when(
Mutation_Type == "substitution" ~ str_extract(Allele, "[ACGT]+(?=>)"),    # Capture sequence before >
Mutation_Type == "deletion" ~ str_extract(Allele, "(?<=del)[ACGT]+"),     # Capture sequence after 'del'
Mutation_Type == "insertion" ~ "",                                        # For insertions, REF is empty
Mutation_Type == "inversion" ~ str_extract(Allele, "(?<=inv)[ACGT]+"),    # Capture sequence after 'inv'
TRUE ~ NA_character_
),
ALT = case_when(
Mutation_Type == "substitution" ~ str_extract(Allele, "(?<=>)[ACGT]+"),   # Capture sequence after >
Mutation_Type == "insertion" ~ str_extract(Allele, "(?<=ins)[ACGT]+"),    # Capture sequence after 'ins'
Mutation_Type == "deletion" ~ "",                                         # For deletions, ALT is empty
Mutation_Type == "inversion" ~ paste(rev(strsplit(REF, "")[[1]]), collapse = ""),                         # Reverse the REF sequence for ALT in inversions
TRUE ~ NA_character_
)
)
View(mitomap)
mitomap <- mitomap %>%
mutate(
Mutation_Type = case_when(
str_detect(Allele, "del") ~ "deletion",
str_detect(Allele, "ins") ~ "insertion",
str_detect(Allele, ">") ~ "substitution",
str_detect(Allele, "inv") ~ "inversion",
TRUE ~ "other"
),
# Extract REF and ALT based on mutation type
REF = case_when(
Mutation_Type == "substitution" ~ str_extract(Allele, "[ACGT]+(?=>)"),    # Capture sequence before >
Mutation_Type == "deletion" ~ str_extract(Allele, "(?<=del)[ACGT]+"),     # Capture sequence after 'del'
Mutation_Type == "insertion" ~ "",                                        # For insertions, REF is empty
Mutation_Type == "inversion" ~ str_extract(Allele, "(?<=inv)[ACGT]+"),    # Capture sequence after 'inv'
TRUE ~ NA_character_
),
ALT = case_when(
Mutation_Type == "substitution" ~ str_extract(Allele, "(?<=>)[ACGT]+"),   # Capture sequence after >
Mutation_Type == "insertion" ~ str_extract(Allele, "(?<=ins)[ACGT]+"),    # Capture sequence after 'ins'
Mutation_Type == "deletion" ~ "*",                                         # For deletions, ALT is empty
Mutation_Type == "inversion" ~ paste(rev(strsplit(REF, "")[[1]]), collapse = ""),                         # Reverse the REF sequence for ALT in inversions
TRUE ~ NA_character_
)
)
View(mitomap)
mitomap <- mitomap %>%
mutate(
Mutation_Type = case_when(
str_detect(Allele, "del") ~ "deletion",
str_detect(Allele, "ins") ~ "insertion",
str_detect(Allele, ">") ~ "substitution",
str_detect(Allele, "inv") ~ "inversion",
TRUE ~ "other"
),
# Extract REF and ALT based on mutation type
REF = case_when(
Mutation_Type == "substitution" ~ str_extract(Allele, "[ACGT]+(?=>)"),    # Capture sequence before >
Mutation_Type == "deletion" ~ str_extract(Allele, "(?<=del)[ACGT]+"),     # Capture sequence after 'del'
Mutation_Type == "insertion" ~ "",                                        # For insertions, REF is empty
Mutation_Type == "inversion" ~ str_extract(Allele, "[ACGT]+(?=inv)"),    # Capture sequence after 'inv'
TRUE ~ NA_character_
),
ALT = case_when(
Mutation_Type == "substitution" ~ str_extract(Allele, "(?<=>)[ACGT]+"),   # Capture sequence after >
Mutation_Type == "insertion" ~ str_extract(Allele, "(?<=ins)[ACGT]+"),    # Capture sequence after 'ins'
Mutation_Type == "deletion" ~ "*",                                         # For deletions, ALT is empty
Mutation_Type == "inversion" ~ paste(rev(strsplit(REF, "")[[1]]), collapse = ""),                         # Reverse the REF sequence for ALT in inversions
TRUE ~ NA_character_
)
)
View(mitomap)
t = "TCGA"
library(stringi)
mitomap <- mitomap %>%
mutate(
Mutation_Type = case_when(
str_detect(Allele, "del") ~ "deletion",
str_detect(Allele, "ins") ~ "insertion",
str_detect(Allele, ">") ~ "substitution",
str_detect(Allele, "inv") ~ "inversion",
TRUE ~ "other"
),
# Extract REF and ALT based on mutation type
REF = case_when(
Mutation_Type == "substitution" ~ str_extract(Allele, "[ACGT]+(?=>)"),    # Capture sequence before >
Mutation_Type == "deletion" ~ str_extract(Allele, "(?<=del)[ACGT]+"),     # Capture sequence after 'del'
Mutation_Type == "insertion" ~ "",                                        # For insertions, REF is empty
Mutation_Type == "inversion" ~ str_extract(Allele, "[ACGT]+(?=inv)"),    # Capture sequence after 'inv'
TRUE ~ NA_character_
),
ALT = case_when(
Mutation_Type == "substitution" ~ str_extract(Allele, "(?<=>)[ACGT]+"),   # Capture sequence after >
Mutation_Type == "insertion" ~ str_extract(Allele, "(?<=ins)[ACGT]+"),    # Capture sequence after 'ins'
Mutation_Type == "deletion" ~ "*",                                         # For deletions, ALT is empty
Mutation_Type == "inversion" ~ stri_reverse(REF),                         # Reverse the REF sequence for ALT in inversions
TRUE ~ NA_character_
)
)
View(mitomap)

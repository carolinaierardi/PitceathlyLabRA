right_node = mu * expm::expm(my_matrix * chosen_tip_dat$Length2)
p_state = matrix(0, nrow = 1, ncol = 4) #initialise p_state mat for node
for (i in 1:ncol(node_states)) {
#for each state, multiply the other probabilities by the information for left and right node
p_state[i] = (node_states[chosen_tip_dat$Daughter1,] %*% left_node[i,]) *
(node_states[chosen_tip_dat$Daughter2,] %*% right_node[i,])
}
node_states[tips,] = p_state #add this to main matrix
}
#return likelihood for whole tree
overall_likelihood = sum(node_states[root_node,] * 1/4)
return(overall_likelihood)
}
observed_sequence = c("A", "C", "A", "G", "G", "A", "T", "C", "A", "T")
# Define the Jukes-Cantor model with row and column names
jc_matrix = matrix(c(-3/4, 1/4, 1/4, 1/4,
1/4, -3/4, 1/4, 1/4,
1/4, 1/4, -3/4, 1/4,
1/4, 1/4, 1/4, -3/4),
nrow = 4, ncol = 4)
mutation_rates = seq(0.01, 1, by = 0.01)
likelihoods = sapply(mutation_rates, function(mu)
find_likelihood(observed_sequence, final_tree_df, jc_matrix, mu))
max_likelihood_index = which.max(likelihoods)
max_likelihood_mu = mutation_rates[max_likelihood_index]
max_likelihood = likelihoods[max_likelihood_index]
log(max_likelihood)
plot(mutation_rates, log(likelihoods), type = "l", xlab = "Mutation rate (mu)",
ylab = "Log Likelihood", main = "Log Likelihood vs Mutation Rate")
# Add maximum likelihood point to the plot
points(max_likelihood_mu, log(max_likelihood), col = "red")
text(max_likelihood_mu, log(max_likelihood), labels = paste(round(max_likelihood_mu, 2)),
pos = 4, col = "red")
seq = c("T","T","T","C","C","A","A","G","G","G")
likelihoods = sapply(mutation_rates, function(mu)
find_likelihood(seq,final_tree_df,jc_matrix, mu))
# Find maximum likelihood value of mu
max_likelihood_index = which.max(likelihoods)
max_likelihood_mu = mutation_rates[max_likelihood_index]
max_likelihood = likelihoods[max_likelihood_index]
seq = c("T","T","T","T","T","T","T","T","T","T")
likelihoods = sapply(mutation_rates, function(mu)
find_likelihood(seq,final_tree_df,jc_matrix, mu))
# Find maximum likelihood value of mu
max_likelihood_index = which.max(likelihoods)
max_likelihood_mu = mutation_rates[max_likelihood_index]
max_likelihood = likelihoods[max_likelihood_index]
sum(c(1,2,3,4) * 0.5)
?sum
sum(20,10)
sum(20,10,5)
sum(20,10,5,7)
knitr::opts_chunk$set(echo = FALSE, include = TRUE, cache = TRUE,
warning = FALSE, message = FALSE)
library(ggplot2)
library(tidyverse)
#install.packages('plot.matrix')
library(plot.matrix)
library(gplots)
library(reshape2)
setwd("/Users/carolinaierardi/Documents/Cambridge/Lent/PopulationGenetics")
tree_data = read.csv("tree_data.txt", sep = " ", header = F)
colnames(tree_data) = c("Node", "Daughter1", "Length1", "Daughter2","Length2")
find_nodes_leaves = function(tree_df) {
#Takes in data named with nodes and daughter nodes
#outputs how many leaves and nodes each one has
tree_nodes = tree_df %>%
select(Node, Daughter1, Daughter2)
all_nodes = unique(c(tree_nodes$Node,
tree_nodes$Daughter1,
tree_nodes$Daughter2))
noD1 = all_nodes[!all_nodes %in% tree_nodes$Daughter1]
noD2 = all_nodes[!all_nodes %in% tree_nodes$Daughter2]
root_node = intersect(noD1, noD2)
leaves = all_nodes[!all_nodes %in% tree_data$Node]
num_nodes = rep(0,nrow(tree_nodes))
num_leaves = rep(0, nrow(tree_nodes))
#check for nodes only connected to leaves
for (i in 1:nrow(tree_nodes)) {
if (all(tree_nodes[i,2:3] %in% leaves) == TRUE) {
num_leaves[i] = 2
}
}
#check for nodes only connected to nodes only connected to leaves
for (i in 1:nrow(tree_nodes)) {
if (all(tree_nodes[i,2:3] %in% tree_nodes[which(num_leaves == 2),1])) {
num_leaves[i] = 4
num_nodes[i] = 2
}
}
# check for nodes connected to one leaf and one node
for (i in 1:nrow(tree_nodes)) {
if (length(which(tree_nodes[i,2:3] %in% tree_nodes[,1] == T)) == 1) {
ind = which(tree_nodes[,1] %in% tree_nodes[i,2:3])
num_leaves[i] = 1 + num_leaves[ind]
num_nodes[i] = 1 + num_nodes[ind]
}
}
#now the remaining nodes excluding the root node
for (i in 1:nrow(tree_nodes)) {
if (i != which(tree_nodes[,1] == root_node) & num_leaves[i] == 0) {
ind1 = which(tree_nodes[,1] == tree_nodes[i,2])
ind2 = which(tree_nodes[,1] == tree_nodes[i,3])
num_leaves[i] = num_leaves[ind1] + num_leaves[ind2]
num_nodes[i] = 2 + num_nodes[ind1] + num_nodes[ind2]
}
}
#finally, find the root node numbers
root_ind = which(tree_nodes[,1] == root_node)
node1 = which(tree_nodes[,1] == tree_nodes[root_ind,2])
node2 = which(tree_nodes[,1] == tree_nodes[root_ind,3])
num_leaves[root_ind] = num_leaves[node1] + num_leaves[node2]
num_nodes[root_ind] = num_nodes[node1] + num_nodes[node2] + 2
new_tree_df = tree_df %>%
add_column("Internal nodes" = num_nodes, "Leaves" = num_leaves)
return(new_tree_df)
}
final_tree_df = find_nodes_leaves(tree_data)
tree_nodes = tree_data %>%
select(Node, Daughter1, Daughter2)
all_nodes = unique(c(tree_data$Node,
tree_data$Daughter1,
tree_data$Daughter2))
noD1 = all_nodes[!all_nodes %in% tree_nodes$Daughter1]
noD2 = all_nodes[!all_nodes %in% tree_nodes$Daughter2]
root_node = intersect(noD1, noD2)
leaves = all_nodes[!all_nodes %in% tree_data$Node]
lengths = rep(0, length(leaves))
for (i in 1:length(leaves)) {
#find where the leave is located in the tree
bottom_tree = which(tree_nodes[,2:3] == leaves[i], arr.ind = TRUE)
#compute length to nearest internal node
my_length = tree_data[bottom_tree[1],2*bottom_tree[2]+1]
#compute which is the next node
node = tree_nodes[bottom_tree[1],1]
#find where the node is located
node_loc = which(tree_nodes[,2:3] == node, arr.ind = TRUE)
while(node != root_node) {
my_length = my_length + tree_data[node_loc[1],2*node_loc[2] + 1]
node = tree_nodes[node_loc[1],1]
node_loc = which(tree_nodes[,2:3] == node, arr.ind = TRUE)
}
lengths[i] = my_length
}
cat(lengths,": if all these numbers are the same then the tree is consistent with an evolutionary tree. ")
find_likelihood = function(sequence, tree_info, my_matrix, mu) {
#function returns likelihood for a given tree, sequence and mu
#initialise a matrix with probabilites at for every node/leaf in tree
#for each state
node_states = matrix(0, nrow = max(tree_info$Node), ncol = 4)
colnames(node_states) = c("A","T","G","C")
#for each possible state, assign probabilities to leaves
for (names in colnames(node_states)) {
node_states[which(sequence == names),names] = 1
}
#determine the order the nodes will be computed in
order_of_nodes = tree_info$Node[order(tree_info$Leaves)]
root_node = tail(order_of_nodes,1) #find root node
for (tips in order_of_nodes) { #for each node in the vector
chosen_tip = tips            #variable with the node
#find the information for that node
chosen_tip_dat = tree_info[which(tree_info$Node == chosen_tip),]
#find left and right node matrix for the given node
left_node = expm::expm(mu * my_matrix * chosen_tip_dat$Length1)
right_node = expm::expm(mu * my_matrix * chosen_tip_dat$Length2)
p_state = matrix(0, nrow = 1, ncol = 4) #initialise p_state mat for node
for (i in 1:ncol(node_states)) {
#for each state, multiply the other probabilities by the information for left and right node
p_state[i] = (node_states[chosen_tip_dat$Daughter1,] %*% left_node[i,]) *
(node_states[chosen_tip_dat$Daughter2,] %*% right_node[i,])
}
node_states[tips,] = p_state #add this to main matrix
}
#return likelihood for whole tree
overall_likelihood = sum(node_states[root_node,] * 1/4)
return(overall_likelihood)
}
seq = c("A","A","A","T","T","T","C","C","G","G")
likelihoods = sapply(mutation_rates, function(mu)
find_likelihood(seq,final_tree_df,jc_matrix, mu))
# Define the Jukes-Cantor model with row and column names
jc_matrix = matrix(c(-3/4, 1/4, 1/4, 1/4,
1/4, -3/4, 1/4, 1/4,
1/4, 1/4, -3/4, 1/4,
1/4, 1/4, 1/4, -3/4),
nrow = 4, ncol = 4)
mutation_rates = seq(0.01, 1, by = 0.01)
seq = c("A","A","A","T","T","T","C","C","G","G")
likelihoods = sapply(mutation_rates, function(mu)
find_likelihood(seq,final_tree_df,jc_matrix, mu))
# Find maximum likelihood value of mu
max_likelihood_index = which.max(likelihoods)
max_likelihood_mu = mutation_rates[max_likelihood_index]
max_likelihood = likelihoods[max_likelihood_index]
log(max_likelihood)
#randomly assign new leaf values
N = 1000
random_leaf_vals = vector(mode='list', length=N)
max_like_mu = vector(mode='list', length=N)
for (n in 1:N) {
new_leaf_vals = sample(c("A","C","G","T"), 10, replace = TRUE)
likelihoods = sapply(mutation_rates, function(mu)
find_likelihood(new_leaf_vals,final_tree_df,jc_matrix, mu))
# Find maximum likelihood value of mu
max_likelihood_index = which.max(likelihoods)
max_likelihood_mu = mutation_rates[max_likelihood_index]
max_likelihood = likelihoods[max_likelihood_index]
max_like_mu[[n]] = max_likelihood_mu
}
hist(unlist(max_like_mu))
mu_plot = density(unlist(max_like_mu))
plot(mu_plot, main = "Distribution of mu MLEs for 1000 random assignments")
observed_sequence = c("A", "C", "A", "G", "G", "A", "T", "C", "A", "T")
# Define the Jukes-Cantor model with row and column names
jc_matrix = matrix(c(-3/4, 1/4, 1/4, 1/4,
1/4, -3/4, 1/4, 1/4,
1/4, 1/4, -3/4, 1/4,
1/4, 1/4, 1/4, -3/4),
nrow = 4, ncol = 4)
mutation_rates = seq(0.01, 1, by = 0.01)
likelihoods = sapply(mutation_rates, function(mu)
find_likelihood(observed_sequence, final_tree_df, jc_matrix, mu))
max_likelihood_index = which.max(likelihoods)
max_likelihood_mu = mutation_rates[max_likelihood_index]
max_likelihood = likelihoods[max_likelihood_index]
log(max_likelihood)
plot(mutation_rates, log(likelihoods), type = "l", xlab = "Mutation rate (mu)",
ylab = "Log Likelihood", main = "Log Likelihood vs Mutation Rate")
# Add maximum likelihood point to the plot
points(max_likelihood_mu, log(max_likelihood), col = "red")
text(max_likelihood_mu, log(max_likelihood), labels = paste(round(max_likelihood_mu, 2)),
pos = 4, col = "red")
hist(unlist(max_like_mu))
hist(unlist(max_like_mu), main = "Distribution of mu MLEs for 1000 random assignments",
xlab = "mu MLEs", col = "coral")
lines(mu_plot, lwd = 2)
plot(mu_plot, main = "Distribution of mu MLEs for 1000 random assignments")
hist(unlist(max_like_mu), main = "Distribution of mu MLEs for 1000 random assignments",
xlab = "mu MLEs", col = "coral", probability = T)
lines(mu_plot, lwd = 2)
mu_plot = density(unlist(max_like_mu), adjust = 2)
hist(unlist(max_like_mu), main = "Distribution of mu MLEs for 1000 random assignments",
xlab = "mu MLEs", col = "coral", probability = T)
lines(mu_plot, lwd = 2)
mu_plot = density(unlist(max_like_mu))
hist(unlist(max_like_mu), main = "Distribution of mu MLEs for 1000 random assignments",
xlab = "mu MLEs", col = "coral", probability = T)
lines(mu_plot, lwd = 2)
mu_plot = density(unlist(max_like_mu))
hist(unlist(max_like_mu), main = "Distribution of mu MLEs for 1000 random assignments",
xlab = "mu MLEs", col = "coral", probability = T)
lines(mu_plot, lwd = 2)
abline(v = mean(unlist(max_like_mu)))
seq = c("T","G","C","A","T","G","C","A","T","G")
likelihoods = sapply(mutation_rates, function(mu)
find_likelihood(seq, final_tree_df, jc_matrix, mu))
# Find maximum likelihood value of mu
max_likelihood_index = which.max(likelihoods)
max_likelihood_mu = mutation_rates[max_likelihood_index]
max_likelihood = likelihoods[max_likelihood_index]
log(max_likelihood)
seq = c("T","T","T","T","T","T","T","T","T","T")
likelihoods = sapply(mutation_rates, function(mu)
find_likelihood(seq, final_tree_df, jc_matrix, mu))
# Find maximum likelihood value of mu
max_likelihood_index = which.max(likelihoods)
max_likelihood_mu = mutation_rates[max_likelihood_index]
max_likelihood = likelihoods[max_likelihood_index]
log(max_likelihood)
#randomly assign new leaf values
N = 1000
random_leaf_vals = vector(mode='list', length=N)
max_like_mu = vector(mode='list', length=N)
for (n in 1:N) {
new_leaf_vals = sample(c("A","C","G","T"), 10, replace = TRUE)
likelihoods = sapply(mutation_rates, function(mu)
find_likelihood(new_leaf_vals,final_tree_df,jc_matrix, mu))
# Find maximum likelihood value of mu
max_likelihood_index = which.max(likelihoods)
max_likelihood_mu = mutation_rates[max_likelihood_index]
max_likelihood = likelihoods[max_likelihood_index]
max_like_mu[[n]] = max_likelihood_mu
}
knitr::opts_chunk$set(echo = FALSE, include = TRUE, cache = TRUE,
warning = FALSE, message = FALSE, eval = FALSE)
mu_plot = density(unlist(max_like_mu))
hist(unlist(max_like_mu), main = "Distribution of mu MLEs for 1000 random assignments",
xlab = "mu MLEs", col = "coral", probability = T)
lines(mu_plot, lwd = 2)
abline(v = mean(unlist(max_like_mu)))
```{r Repeating Tajma D}
m <- function(x, k) {
j <- 1
for (i in 1:k) {
if (x[i] > x[j])
j <- i
}
j
}
f <- function(x, k) {
i <- 1
while (i < k) {
t <- x[i]
x[i] <- x[k]
x[k] <- t
i <- i + 1
k <- k - 1
}
x
}
p <- function(x) {
n <- length(x)
for (i in n:1) {
m <- m(x, i)
print(m)
x <- f(x, m)
x <- f(x, i)
print(x)
}
x
}
p( c(4, 5, 2, 8)) # case 1
p( c(15, 8, 9, 30, 7, 1, 69, 4, 10)) # case 2
a <- 3; b <- 5
M <- matrix(1, a, b)
q <- function(M, i, j) {
f <- function(u,v) {
if (u<1 || u>a) return(0)
if (v<1 || v>b) return(0)
return(M[u,v])
}
for (i in 1:a) {
for (j in b:1) {
s <- f(i-1, j) + f(i, j+1)
M[i,j] <- M[i,j] * max(s, 1)
}
}
return(M)
}
a <- 3; b <- 5
M <- matrix(1, a, b)
q(M, a, b)
a <- 4; b <- 5
M <- matrix(1, a, b)
M[2,2] <- M[2,4] <- 0
q(M, a, b)
s = function(n) {
a = b = 0
while(n > 0) {
n = n - 1
if (a == 1) {
a = 0; b = b + 1
} else {
a = 1
}
}
c(b,a)
}
g = function(a,b) {
if (b == 1) {
a
} else {
r = s(b)
ifelse(r[2], a, 0) + g(a+a, r[1])
}
}
g(9,8)
g(8,9)
g(6,10)
g(7,9)
s(6)
s(7)
`/diff()`
?diff
?stopifnot
f = function(n,y) {
stopifnot(all(diff(y) > 0))
a = rep(0,n)
for (c in y) {
for (j in 1:n) {
if (c <= j) {
l = j - c
w = ifelse(l==0, 1, a[l])
a[j] = a[j] + w
}
}
print(a)
}
a[n]
}
f(7, c(1,2,4))
f(12,c(1,2,4))
f(12,c(1,5,10))
s = function(L,k) {
## L is a vector of numbers. k is a positive integer.
print(c(k, L)) ## show what is printed each time here
if (length(L) < 2) {
return (L[k])
}
p = 1; x = L[p]
p1 = p2 = p3 = c()
for (y in L) {
if (y < x) p1 = c(p1, y)
if (y == x) p2 = c(p2, y)
if (y > x) p3 = c(p3, y)
}
if ( k <= length(p1) ) {
return ( s(p1, k) )
} else {
z = length(p1) + length(p2)
if ( k > z ) {
return ( s(p3, k - z) )
} else {
return ( x )
}
}
}
## Evaluate the following expressions:
L = c(6, 4, 19, 2, 17, 18, 2)
a = s(L, 1)
b = s(L, 4)
c = s(L, 7)
d = s(L, 8)
#Change environment to import data
setwd("/Users/carolinaierardi/Documents/Personal/Currículo/PitceathlyLabRA")
library(dplyr)
library(stringr)
library(stringi)
mito_var1 = readLines("task_example.vcf")
mito_var = read.table("task_example.vcf", stringsAsFactors = F)
mitomap = read.csv("ConfirmedMutations  MITOMAP  Foswiki.csv")
mito_var1 = mito_var1[-(grep("#CHROM",mito_var1)+1):-(length(mito_var1))]
vcf_names = unlist(strsplit(mito_var1[length(mito_var1)],"\t"))
names(mito_var) = vcf_names
unique(mito_var["SAMPLE"])
mito_var <- mito_var %>%
mutate(AF = as.numeric(str_extract(INFO, "(?<=AF=)[0-9.]+")))
summary(mito_var$AF)
hist(mito_var$AF, main = "Distribution of AF (Heteroplasmy Levels)", xlab = "AF")
unique_samples = length(unique(mito_var$SAMPLE)) # Assuming SampleID is the column name
# Define mutation types by keywords in the "Allele" column
mitomap <- mitomap %>%
mutate(
Mutation_Type = case_when(
str_detect(Allele, "del") ~ "deletion",
str_detect(Allele, "ins") ~ "insertion",
str_detect(Allele, ">") ~ "substitution",
str_detect(Allele, "inv") ~ "inversion",
TRUE ~ "other"
),
# Extract REF and ALT based on mutation type
REF = case_when(
Mutation_Type == "substitution" ~ str_extract(Allele, "[ACGT]+(?=>)"),    # Capture sequence before >
Mutation_Type == "deletion" ~ str_extract(Allele, "(?<=del)[ACGT]+"),     # Capture sequence after 'del'
Mutation_Type == "insertion" ~ "",                                        # For insertions, REF is empty
Mutation_Type == "inversion" ~ str_extract(Allele, "[ACGT]+(?=inv)"),    # Capture sequence after 'inv'
TRUE ~ NA_character_
),
ALT = case_when(
Mutation_Type == "substitution" ~ str_extract(Allele, "(?<=>)[ACGT]+"),   # Capture sequence after >
Mutation_Type == "insertion" ~ str_extract(Allele, "(?<=ins)[ACGT]+"),    # Capture sequence after 'ins'
Mutation_Type == "deletion" ~ "*",                                         # For deletions, ALT is empty
Mutation_Type == "inversion" ~ stri_reverse(REF),                         # Reverse the REF sequence for ALT in inversions
TRUE ~ NA_character_
)
)
# Confirm parsing has worked by checking a sample
head(mitomap_data)
# Confirm parsing has worked by checking a sample
head(mitomap)
View(mito_var)
View(mitomap)
pathogenic_variants <- mito_var %>%
inner_join(mitomap, by = c("POS" = "Position", "REF", "ALT"))
View(pathogenic_variants)
pathogenic_variants <- mito_var %>%
inner_join(mitomap, by = c("POS" = "Position"))
common_positions <- intersect(mito_var$POS, mitomap$Position)
# Step 2: Filter both datasets by the common positions
mito_var_filter <- mito_var %>% filter(POS %in% common_positions)
mitomap_filtered <- mitomap %>% filter(Position %in% common_positions)
View(mito_var_filter)
View(mitomap_filtered)
pathogenic_variants <- mito_var %>%
inner_join(mitomap, by = c("POS" = "Position"))
pathogenic_variants <- vcf_data %>%
inner_join(mitomap_data, by = c("POS" = "Position", "REF", "ALT"))
pathogenic_variants <- mito_var %>%
inner_join(mitomap, by = c("POS" = "Position", "REF", "ALT"))
View(pathogenic_variants)
clinician_table <- pathogenic_variants %>%
select(SampleID, POS, REF, ALT, AF) %>%
arrange(SampleID)
clinician_table <- pathogenic_variants %>%
select(SAMPLE, POS, REF, ALT, AF) %>%
arrange(SAMPLE)
View(clinician_table)
library(readr)       # For reading TSV and CSV files
library(readxl)      # For reading Excel files
library(dplyr)       # For data manipulation
library(GenomicRanges) # For working with genomic ranges
# Load the gene lists
panel_genes = read_tsv("Mitochondrial disorders.tsv")
setwd("/Users/carolinaierardi/Documents/Personal/Currículo/PitceathlyLabRA/Task2")
# Load the gene lists
panel_genes = read_tsv("Mitochondrial disorders.tsv")
mitocarta_genes = read_excel("Human.MitoCarta3.0.xls", sheet = 1)
View(mitocarta_genes)
# Load the gene lists
panel_genes = read_tsv("Mitochondrial disorders.tsv")
mitocarta_genes = read_excel("Human.MitoCarta3.0.xls", sheet = 2)
View(mitocarta_genes)
